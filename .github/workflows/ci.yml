name: Workflow for js app

on:
  push:
    branches: [ main ]
  pull_request: 
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debugging
        run: | 
          python3 --version
          pip --version

      - name: Install dependencies
        run: |
          /usr/bin/python3 -m pip install --upgrade pip
          pip install ansible boto boto3

      - name: Install anisble aws collection
        run: ansible-galaxy collection install amazon.aws

      - name: Play Ansible Playbook
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: ansible-playbook -i localhost ./create_ec2.yml 
          #      - name: Play Ansible Playbook
          #uses: arillso/action.playbook@master
          #with:
          #playbook: ./create_ec2.yml
            #inventory: tests/hosts.yml
            #galaxy_file: tests/requirements.yml
            #env:
            #ANSIBLE_HOST_KEY_CHECKING: 'false'
            #ANSIBLE_DEPRECATION_WARNINGS: 'false'
            #AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            #AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: app
          push: true
          tags: khond/github:latest

      - name: Docker logout
        run: docker logout

      - name: Deployment our app
        env: 
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USER }}
          VM_PRIVATE_KEY: ${{ secrets.VM_PRIVATE_KEY }}
        run: |
          echo "$VM_PRIVATE_KEY" > /tmp/vm_private_key.pem
          chmod 400 /tmp/vm_private_key.pem

          ssh -o StrictHostKeychecking=no -i /tmp/vm_private_key.pem $VM_USER@$VM_HOST << EOF
          sudo docker rm -f my-app || true 
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/github:latest 
          sudo docker run -d --name my-app -p 3000:3000 ${{ secrets.DOCKERHUB_USERNAME }}/github:latest
          EOF

      - name: Cleaan up
        run: rm /tmp/vm_private_key.pem
